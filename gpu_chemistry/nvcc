SUFFIXES += .cu

c++WARN     =


NVCC_FLAGS = --std=c++17
NVCC_FLAGS += -ccbin g++
NVCC_FLAGS += --expt-relaxed-constexpr
NVCC_FLAGS += --expt-extended-lambda
NVCC_FLAGS += --use_fast_math
#NVCC_FLAGS += -fmad=false
#NVCC_FLAGS += --gpu-architecture=compute_80 --gpu-code=sm_80
NVCC_FLAGS += --gpu-architecture=compute_86 --gpu-code=sm_86


#NVCC_PATH    = $(CUDA_ROOT)/bin/nvcc
#NVCC_PATH    = nvcc
CC          = nvcc $(NVCC_FLAGS)


#include $(DEFAULT_RULES)/c++$(WM_COMPILE_OPTION)

ptFLAGS     = -DNoRepository #-ftemplate-depth-100

c++FLAGS    = $(GFLAGS) $(c++WARN) $(c++DBUG) $(ptFLAGS) \
              $(LIB_HEADER_DIRS) --compiler-options -fPIC

#NOTE! TURN THIS ON TO GET O3
#c++FLAGS    = $(GFLAGS) $(c++WARN) $(c++OPT) $(c++DBUG) $(ptFLAGS) \
#              $(LIB_HEADER_DIRS) -fPIC

Ctoo        = $(WM_SCHEDULER) $(CC) $(c++FLAGS) -c $< -o $@
cxxtoo      = $(Ctoo)
cctoo       = $(Ctoo)
cpptoo      = $(Ctoo)
cutoo       = $(Ctoo)

LINK_LIBS   = $(c++DBUG)

LINKLIBSO   = $(CC) $(c++FLAGS) -shared \
              -Xlinker --add-needed -Xlinker --no-as-needed

LINKEXE     = $(CC) $(c++FLAGS) \
              -Xlinker --add-needed -Xlinker --no-as-needed